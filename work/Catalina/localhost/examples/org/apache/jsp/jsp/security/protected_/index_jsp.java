/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.75
 * Generated at: 2019-02-13 10:07:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.security.protected_;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

  if (request.getParameter("logoff") != null) {
    session.invalidate();
    response.sendRedirect("index.jsp");
    return;
  }

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>Protected Page for Examples</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body bgcolor=\"white\">\r\n");
      out.write("\r\n");
      out.write("You are logged in as remote user\r\n");
      out.write("<b>");
      out.print( util.HTMLFilter.filter(request.getRemoteUser()) );
      out.write("</b>\r\n");
      out.write("in session <b>");
      out.print( session.getId() );
      out.write("</b><br><br>\r\n");
      out.write("\r\n");

  if (request.getUserPrincipal() != null) {

      out.write("\r\n");
      out.write("    Your user principal name is\r\n");
      out.write("    <b>");
      out.print( util.HTMLFilter.filter(request.getUserPrincipal().getName()) );
      out.write("</b>\r\n");
      out.write("    <br><br>\r\n");

  } else {

      out.write("\r\n");
      out.write("    No user principal could be identified.<br><br>\r\n");

  }

      out.write("\r\n");
      out.write("\r\n");

  String role = request.getParameter("role");
  if (role == null)
    role = "";
  if (role.length() > 0) {
    if (request.isUserInRole(role)) {

      out.write("\r\n");
      out.write("      You have been granted role\r\n");
      out.write("      <b>");
      out.print( util.HTMLFilter.filter(role) );
      out.write("</b><br><br>\r\n");

    } else {

      out.write("\r\n");
      out.write("      You have <i>not</i> been granted role\r\n");
      out.write("      <b>");
      out.print( util.HTMLFilter.filter(role) );
      out.write("</b><br><br>\r\n");

    }
  }

      out.write("\r\n");
      out.write("\r\n");
      out.write("To check whether your username has been granted a particular role,\r\n");
      out.write("enter it here:\r\n");
      out.write("<form method=\"GET\" action='");
      out.print( response.encodeURL("index.jsp") );
      out.write("'>\r\n");
      out.write("<input type=\"text\" name=\"role\" value=\"");
      out.print( util.HTMLFilter.filter(role) );
      out.write("\">\r\n");
      out.write("</form>\r\n");
      out.write("<br><br>\r\n");
      out.write("\r\n");
      out.write("If you have configured this app for form-based authentication, you can log\r\n");
      out.write("off by clicking\r\n");
      out.write("<a href='");
      out.print( response.encodeURL("index.jsp?logoff=true") );
      out.write("'>here</a>.\r\n");
      out.write("This should cause you to be returned to the logon page after the redirect\r\n");
      out.write("that is performed.\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
